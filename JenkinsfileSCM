pipeline {
    agent {
        kubernetes {
            yamlFile 'kubernetesPod.yaml'
            defaultContainer 'builder'
        }
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '3'))
    }
    
    parameters {
        string(name: 'BUILD_TYPE', defaultValue: 'default')
    }

    stages {
		stage('Initialize') {
		    when {
			    branch 'master'
                expression { params.BUILD_TYPE != 'product_release' }
            }
            steps {
                script { currentBuild.result = 'ABORTED' }
                error 'Build of the master branch can only be invoked as part of the product_release'
            }
	    }
        stage('Prepare environment') {
            steps {
				container('builder') {
	                script {
	                    env.GROUP_ID = sh(returnStdout: true, script: "mvn -B help:evaluate -Dexpression=project.groupId -q -DforceStdout").trim()
	                    env.ARTIFACT_ID = sh(returnStdout: true, script: "mvn -B help:evaluate -Dexpression=project.artifactId -q -DforceStdout").trim()
	                    env.VERSION = sh(returnStdout: true, script: "mvn -B help:evaluate -Dexpression=project.version -q -DforceStdout").trim()
	                    env.REGISTRY = "registry.openanalytics.eu"
	                    env.MVN_ARGS = "-Dmaven.repo.local=/home/jenkins/maven-repository --batch-mode"
	                    env.MVN_EXLCUDE_PARENT = ""
	                }
	            }
            }

        }
        stage('Build') {
            steps {
                container('builder') {
                    configFileProvider([configFile(fileId: 'maven-settings-rsb', variable: 'MAVEN_SETTINGS_RSB')]) {
                        sh "mvn -s \$MAVEN_SETTINGS_RSB -U clean install -DskipTests -Ddocker.skip ${env.MVN_ARGS} ${env.MVN_EXLCUDE_PARENT}"
                    }
                }
            }
        }
        stage('Test') {
            steps {
                container('builder') {
                    configFileProvider([configFile(fileId: 'maven-settings-rsb', variable: 'MAVEN_SETTINGS_RSB')]) {
                        sh "mvn -s \$MAVEN_SETTINGS_RSB test -Ddocker.skip ${env.MVN_ARGS} ${env.MVN_EXLCUDE_PARENT}"
                    }
                }
            }
        }
        stage("Deploy to Nexus") {
            steps {
                container('builder') {
                    configFileProvider([configFile(fileId: 'maven-settings-rsb', variable: 'MAVEN_SETTINGS_RSB')]) {
                        sh "mvn -s \$MAVEN_SETTINGS_RSB deploy -DskipTests -Ddocker.skip ${env.MVN_ARGS} ${env.MVN_EXLCUDE_PARENT}"
                    }
                }
            }
        }
        stage('Build Docker image') {
            steps {
                container('builder') {
                    configFileProvider([configFile(fileId: 'maven-settings-rsb', variable: 'MAVEN_SETTINGS_RSB')]) {
                        sh "mvn -s \$MAVEN_SETTINGS_RSB validate docker:build ${env.MVN_ARGS}"
                    }
                }
            }
        }
        stage('Push to OA registry') {
            steps {
                container('builder') {
                    configFileProvider([configFile(fileId: 'maven-settings-rsb', variable: 'MAVEN_SETTINGS_RSB')]) {
                        sh "mvn -s \$MAVEN_SETTINGS_RSB validate docker:push -Ddocker.push.registry=${REGISTRY} ${env.MVN_ARGS}"
                    }
                }
            }
        }
    }

//    post {
//        success {
//            step([$class: 'JacocoPublisher',
//                  execPattern: '**/target/jacoco.exec',
//                  classPattern: '**/target/classes',
//                  sourcePattern: '**/src/main/java',
//                  exclusionPattern: '**/src/test*'
//            ])
//        }
//    }

}
